#!/usr/bin/env python

"""create_base64_files to use in ignition files for vmware """

__author__ = "Alejandro Guadarrama Dominguez"
__copyright__ = "Copyright 2020, Alejandro Guadarrama Dominguez"
__credits__ = ["Alejandro Guadarrama Dominguez"]
__license__ = "GPL"
__version__ = "0.0.1"
__maintainer__ = "Alejandro Guadarrama Dominguez"
__email__ = "alexgd.devops@gmail.com"
__status__ = "Dev"

import base64, json, sys, copy

bootstrap = {
  "ignition": {
    "config": {
      "append": [
        {
          "source": "http://10.56.241.10/bootstrap.ign",
          "verification": {}
        }
      ]
    },
    "timeouts": {},
    "version": "2.1.0"
  },
  "networkd": {},
  "passwd": {},
  "storage": {},
  "systemd": {}
}

# load the ignition fules to inject the resources
master = json.load(open('deploy/master.ign', 'r'))
worker = json.load(open('deploy/worker.ign', 'r'))

# Dictionary to store the values of the hostnames and ip addresses
# to create corresponding files and configurations in the ignition files
machines = {
    'bootstrap': {
        'ips': [12],
        'hosts': ['bootstrap']
    },
    'master': {
        'ips': [13, 14, 15],
        'hosts': ['master01', 'master02', 'master03']
    },
    'worker': {
        'ips': [16, 17],
        'hosts': ['worker01', 'worker02']
    },
    'infra': {
        'ips': [18, 19],
        'hosts': ['infra01', 'infra02']
    }
}


virtual_machines = {}

# loop to create the ignition values for each node
# The network configurations are harcoded you have to change
# planing to use a template further
for machine in machines:
    nic = 'ens192'
    cluster_name = 'ocp4'
    domain_name = 'example.com'
    index = 0
    virtual_machines[machine] = []
    for ip in machines[machine]['ips']:
        if machine == 'bootstrap':
            ignition = bootstrap
        elif machine == 'master':
            ignition = copy.deepcopy(master)
        else:
            ignition = copy.deepcopy(worker)
        host = machines[machine]['hosts'][index]
        full_hostname = '{}.{}.{}'.format(host, cluster_name, domain_name)
        files = ignition['storage'].get('files', [])
        files.append({'path': '/etc/hostname', 'mode': 420,
        'contents': {'source': 'data:text/plain;charset=utf-8;base64,' +
        base64.standard_b64encode(bytes(full_hostname, encoding='utf-8'))
        .decode().strip(),'verification': {}}, 'filesystem': 'root'})
        ifcfg = '''# Generated by create_base64_files
TYPE=Ethernet
NAME="{}"
DEVICE="{}"
ONBOOT=yes
NETBOOT=yes
BOOTPROTO=none
IPADDR="10.56.241.{}"
NETMASK="255.255.254.0"
GATEWAY="10.56.240.254"
DNS1="10.56.240.1"
'''.format(nic, nic, ip)
        files.append({'path': '/etc/sysconfig/network-scripts/ifcfg-ens192',
            'mode': 420, 'contents': {
            'source': 'data:text/plain;charset=utf-8;base64,' +
             base64.standard_b64encode(bytes(
             ifcfg, encoding='utf-8')).decode().strip(),
            'verification': {}}, 'filesystem': 'root'})
        ignition['storage']['files'] = files
        units = ignition['networkd'].get('units', [])
        net = '''[Match]
Name={}

[Network]
Address=.10.56.241.{}/23
Gateway=10.56.240.254
DNS=10.56.240.1
Domains={}
'''.format(nic, ip, domain_name)
        units.append({'name': '00-{}.network'.format(nic), 'contents': net})
        ignition['networkd']['units'] = units

        ignition_minified = json.dumps(ignition)
        ignition_base64 = base64.standard_b64encode(bytes(
        ignition_minified, encoding='utf-8')).decode().strip()

        index += 1

        virtual_machines[machine].append(
          {"name": host, "data64": ignition_base64}
        )


file_output = '''# __author__ = "Alejandro Guadarrama Dominguez"
# __copyright__ = "Copyright 2020, Alejandro Guadarrama Dominguez"
# __credits__ = ["Alejandro Guadarrama Dominguez"]
# __license__ = "GPL"
# __version__ = "0.0.1"
# __maintainer__ = "Alejandro Guadarrama Dominguez"
# __email__ = "alexgd.devops@gmail.com"
# __status__ = "Dev"

virtual_machines = {}
'''.format(json.dumps(virtual_machines, indent=2)).replace(':', ' =')

f = open("terraform/vars/machine_data.tfvars", "w")
f.write(file_output)
f.close()
